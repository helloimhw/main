<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>몬티홀 게임</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f7fa;
      color: #333;
      text-align: center;
      padding: 30px;
    }

    h1 {
      color: #2c3e50;
    }

    .container {
      max-width: 800px;
      margin: auto;
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }

    .doors {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin: 30px 0;
    }

    .door {
      width: 100px;
      height: 100px;
      background-color: #3498db;
      color: white;
      font-size: 24px;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .door.selected {
      background-color: #2980b9;
      transform: scale(1.1);
    }

    .door.open {
      background-color: #2ecc71;
      cursor: default;
    }

    .door.revealed {
      background-color: #e67e22;
    }

    .controls {
      margin: 20px 0;
    }

    button {
      padding: 10px 20px;
      margin: 10px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s;
    }

    button:hover {
      opacity: 0.9;
    }

    #openDoorBtn {
      background-color: #f39c12;
      color: white;
    }

    #switchDecision {
      background-color: #27ae60;
      color: white;
    }

    #stayDecision {
      background-color: #e74c3c;
      color: white;
    }

    .result {
      margin: 20px 0;
      font-size: 20px;
      font-weight: bold;
    }

    .stats {
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
      margin-top: 30px;
      background: #ecf0f1;
      padding: 20px;
      border-radius: 10px;
    }

    .stat-box {
      background: white;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
      min-width: 180px;
      margin: 10px;
    }

    .stat-value {
      font-size: 28px;
      font-weight: bold;
      color: #2c3e50;
    }

    .stat-label {
      font-size: 16px;
      color: #7f8c8d;
    }

    .history {
      margin-top: 30px;
      max-height: 200px;
      overflow-y: auto;
      background: #f8f9fa;
      padding: 15px;
      border-radius: 10px;
      text-align: left;
    }

    .history h3 {
      margin-top: 0;
    }

    .history p {
      margin: 5px 0;
      font-size: 14px;
      color: #555;
    }

    .win {
      color: #27ae60;
    }

    .lose {
      color: #e74c3c;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>몬티홀 게임</h1>
    <p>승리 확률을 실시간으로 계산합니다. 여러 번 시도해보세요!</p>

    <div class="doors">
      <div class="door" data-index="0">1</div>
      <div class="door" data-index="1">2</div>
      <div class="door" data-index="2">3</div>
    </div>

    <div class="controls">
      <button id="openDoorBtn">게임 시작</button>
      <button id="switchDecision" disabled>변경</button>
      <button id="stayDecision" disabled>고수</button>
    </div>

    <div class="result" id="resultText"></div>

    <div class="stats">
      <div class="stat-box">
        <div class="stat-label">총 시도 횟수</div>
        <div class="stat-value" id="totalTrials">0</div>
      </div>
      <div class="stat-box">
        <div class="stat-label">변경 시 승리율</div>
        <div class="stat-value" id="switchWinRate">0%</div>
      </div>
      <div class="stat-box">
        <div class="stat-label">유지 시 승리율</div>
        <div class="stat-value" id="stayWinRate">0%</div>
      </div>
    </div>

    <div class="history">
      <h3>게임 히스토리</h3>
      <div id="historyList"></div>
    </div>
  </div>

  <script>
    const doors = document.querySelectorAll('.door');
    const openDoorBtn = document.getElementById('openDoorBtn');
    const switchDecision = document.getElementById('switchDecision');
    const stayDecision = document.getElementById('stayDecision');
    const resultText = document.getElementById('resultText');
    const totalTrialsEl = document.getElementById('totalTrials');
    const switchWinRateEl = document.getElementById('switchWinRate');
    const stayWinRateEl = document.getElementById('stayWinRate');
    const historyList = document.getElementById('historyList');

    let selectedDoor = null;
    let prizeDoor = null;
    let openedDoor = null;
    let totalTrials = 0;
    let switchWins = 0;
    let stayWins = 0;

    function resetDoors() {
      doors.forEach(door => {
        door.classList.remove('selected', 'open', 'revealed');
        door.textContent = door.dataset.index * 1 + 1;
        door.disabled = false;
      });
      selectedDoor = null;
      prizeDoor = Math.floor(Math.random() * 3);
      openedDoor = null;
      switchDecision.disabled = true;
      stayDecision.disabled = true;
      resultText.textContent = '';
    }

    function updateStats() {
      totalTrialsEl.textContent = totalTrials;
      const switchRate = totalTrials === 0 ? 0 : (switchWins / totalTrials * 100).toFixed(1);
      const stayRate = totalTrials === 0 ? 0 : (stayWins / totalTrials * 100).toFixed(1);
      switchWinRateEl.textContent = switchRate + '%';
      stayWinRateEl.textContent = stayRate + '%';
    }

    function addHistory(text, isWin) {
      const p = document.createElement('p');
      p.textContent = text;
      p.className = isWin ? 'win' : 'lose';
      historyList.prepend(p);
    }

    doors.forEach(door => {
      door.addEventListener('click', () => {
        if (selectedDoor !== null) return;

        doors.forEach(d => d.classList.remove('selected'));
        door.classList.add('selected');
        selectedDoor = parseInt(door.dataset.index);
      });
    });

    openDoorBtn.addEventListener('click', () => {
      if (selectedDoor === null) {
        alert('먼저 선택된 문을 골라주세요!');
        return;
      }

      prizeDoor = Math.floor(Math.random() * 3);
      openedDoor = null;

      // 열린 문은 선택된 문과 상 상의 문이 아님
      const possibleOpen = [0,1,2].filter(i => i !== selectedDoor && i !== prizeDoor);
      openedDoor = possibleOpen[Math.floor(Math.random() * possibleOpen.length)];

      // 도어 열기
      doors.forEach((door, i) => {
        if (i === openedDoor) {
          door.classList.add('open');
          door.textContent = i + 1 === prizeDoor + 1 ? '🐐' : '❌';
          door.disabled = true;
        }
      });

      // 버튼 활성화
      switchDecision.disabled = false;
      stayDecision.disabled = false;
      openDoorBtn.disabled = true;
    });

    switchDecision.addEventListener('click', () => {
      const finalChoice = [0,1,2].find(i => i !== selectedDoor && i !== openedDoor);
      const isWin = finalChoice === prizeDoor;

      resultText.textContent = isWin ? '✅ 변경해서 이겼습니다!' : '❌ 변경해서 졌습니다.';
      totalTrials++;
      if (isWin) switchWins++;
      addHistory(`시도 #${totalTrials}: 변경 → ${isWin ? '승리' : '패배'}`, isWin);

      updateStats();
      resetAfterDecision();
    });

    stayDecision.addEventListener('click', () => {
      const isWin = selectedDoor === prizeDoor;
      resultText.textContent = isWin ? '✅ 그대로 두고 이겼습니다!' : '❌ 그대로 두고 졌습니다.';
      totalTrials++;
      if (isWin) stayWins++;
      addHistory(`시도 #${totalTrials}: 유지 → ${isWin ? '승리' : '패배'}`, isWin);

      updateStats();
      resetAfterDecision();
    });

    function resetAfterDecision() {
      doors.forEach(door => door.classList.remove('open'));
      setTimeout(() => {
        openDoorBtn.disabled = false;
        selectedDoor = null;
        switchDecision.disabled = true;
        stayDecision.disabled = true;
        resultText.textContent = '';
        doors.forEach(door => {
          door.classList.remove('open', 'revealed');
          door.textContent = door.dataset.index * 1 + 1;
          door.disabled = false;
        });
      }, 1500);
    }

    // 초기화
    resetDoors();
  </script>
</body>
</html>
