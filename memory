<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>메모리 카드 게임</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f8ff;
            margin: 0;
            padding: 20px;
        }

        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .game-info {
            margin-bottom: 20px;
            text-align: center;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            grid-template-rows: repeat(4, 120px);
            gap: 10px;
            margin-bottom: 20px;
        }

        .card {
            width: 100px;
            height: 120px;
            perspective: 1000px;
            cursor: pointer;
            transition: transform 0.5s;
            transform-style: preserve-3d;
        }

        .card.flipped {
            transform: rotateY(180deg);
        }

        .card-inner {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .card-front, .card-back {
            width: 100%;
            height: 100%;
            position: absolute;
            backface-visibility: hidden;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            box-sizing: border-box;
        }

        .card-front {
            background-color: #3498db;
            background-image: url('https://via.placeholder.com/100x120/3498db/ffffff?text=?');
            background-size: cover;
        }

        .card-back {
            background-color: #2ecc71;
            transform: rotateY(180deg);
        }

        .matched {
            visibility: hidden;
        }

        .controls {
            margin-top: 20px;
            display: flex;
            gap: 10px;
        }

        button {
            padding: 10px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #2980b9;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 20px;
            font-size: 18px;
        }

        .win-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 36px;
            z-index: 100;
            display: none;
        }

        .win-message button {
            margin-top: 20px;
            font-size: 20px;
            padding: 15px 30px;
        }
    </style>
</head>
<body>
    <h1>메모리 카드 게임</h1>
    <div class="game-info">
        <p>카드를 두 장씩 뒤집어 같은 그림을 찾으세요!</p>
    </div>

    <div class="stats">
        <div>시도 횟수: <span id="attempts">0</span></div>
        <div>매치 횟수: <span id="matches">0</span></div>
    </div>

    <div class="game-board" id="gameBoard">
        <!-- 카드는 JavaScript로 동적으로 생성됩니다 -->
    </div>

    <div class="controls">
        <button id="resetBtn">게임 다시 시작</button>
    </div>

    <div class="win-message" id="winMessage">
        <h2>축하합니다! 모든 카드를 찾았어요!</h2>
        <p>총 시도 횟수: <span id="finalAttempts">0</span></p>
        <button id="playAgainBtn">다시 하기</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gameBoard = document.getElementById('gameBoard');
            const resetBtn = document.getElementById('resetBtn');
            const playAgainBtn = document.getElementById('playAgainBtn');
            const winMessage = document.getElementById('winMessage');
            const attemptsDisplay = document.getElementById('attempts');
            const matchesDisplay = document.getElementById('matches');
            const finalAttemptsDisplay = document.getElementById('finalAttempts');

            let cards = [];
            let hasFlippedCard = false;
            let lockBoard = false;
            let firstCard, secondCard;
            let attempts = 0;
            let matches = 0;

            // 카드 이미지 목록 (이모지 사용)
            const cardImages = [
                '🍎', '🍎', '🍌', '🍌',
                '🍒', '🍒', '🍓', '🍓',
                '🍊', '🍊', '🍋', '🍋',
                '🍉', '🍉', '🍇', '🍇'
            ];

            // 게임 초기화
            function initGame() {
                attempts = 0;
                matches = 0;
                attemptsDisplay.textContent = attempts;
                matchesDisplay.textContent = matches;
                winMessage.style.display = 'none';

                // 기존 카드 제거
                gameBoard.innerHTML = '';

                // 카드 섞기
                cards = shuffleArray([...cardImages]);

                // 카드 생성
                cards.forEach((image, index) => {
                    const card = document.createElement('div');
                    card.classList.add('card');
                    card.dataset.index = index;

                    const cardInner = document.createElement('div');
                    cardInner.classList.add('card-inner');

                    const cardFront = document.createElement('div');
                    cardFront.classList.add('card-front');

                    const cardBack = document.createElement('div');
                    cardBack.classList.add('card-back');
                    cardBack.textContent = image;

                    cardInner.appendChild(cardFront);
                    cardInner.appendChild(cardBack);
                    card.appendChild(cardInner);

                    gameBoard.appendChild(card);

                    // 카드 클릭 이벤트 추가
                    card.addEventListener('click', flipCard);
                });
            }

            // 카드 뒤집기
            function flipCard() {
                if (lockBoard) return;
                if (this === firstCard) return;
                if (this.classList.contains('matched')) return;

                this.classList.add('flipped');

                if (!hasFlippedCard) {
                    // 첫 번째 카드 선택
                    hasFlippedCard = true;
                    firstCard = this;
                    return;
                }

                // 두 번째 카드 선택
                secondCard = this;
                attempts++;
                attemptsDisplay.textContent = attempts;

                checkForMatch();
            }

            // 카드 매치 확인
            function checkForMatch() {
                const firstCardImage = firstCard.querySelector('.card-back').textContent;
                const secondCardImage = secondCard.querySelector('.card-back').textContent;

                if (firstCardImage === secondCardImage) {
                    // 매치 성공
                    disableCards();
                    matches++;
                    matchesDisplay.textContent = matches;

                    if (matches === cardImages.length / 2) {
                        // 모든 카드를 찾음
                        setTimeout(() => {
                            finalAttemptsDisplay.textContent = attempts;
                            winMessage.style.display = 'flex';
                        }, 500);
                    }
                } else {
                    // 매치 실패 - 카드 다시 뒤집기
                    unflipCards();
                }
            }

            // 매치된 카드 비활성화
            function disableCards() {
                firstCard.classList.add('matched');
                secondCard.classList.add('matched');
                firstCard.removeEventListener('click', flipCard);
                secondCard.removeEventListener('click', flipCard);

                resetBoard();
            }

            // 카드 다시 뒤집기
            function unflipCards() {
                lockBoard = true;

                setTimeout(() => {
                    firstCard.classList.remove('flipped');
                    secondCard.classList.remove('flipped');

                    resetBoard();
                }, 1000);
            }

            // 게임 보드 초기화
            function resetBoard() {
                [hasFlippedCard, lockBoard] = [false, false];
                [firstCard, secondCard] = [null, null];
            }

            // 배열 섞기 (Fisher-Yates 알고리즘)
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
                return array;
            }

            // 다시 시작 버튼 클릭 시
            resetBtn.addEventListener('click', initGame);
            playAgainBtn.addEventListener('click', initGame);

            // 게임 시작
            initGame();
        });
    </script>
</body>
</html>
