<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Î£∞Î†õ ÎèåÎ¶¨Í∏∞</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 1200px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            align-items: start;
        }

        .control-panel {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .control-panel h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .word-input-section {
            margin-bottom: 20px;
        }

        .word-input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .word-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .word-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .add-word-btn {
            padding: 12px 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }

        .add-word-btn:hover {
            background: #5a5fcf;
            transform: translateY(-2px);
        }

        .word-list {
            max-height: 200px;
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .word-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: white;
            margin-bottom: 8px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .word-text {
            flex: 1;
            font-size: 16px;
        }

        .delete-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .delete-btn:hover {
            background: #ff5252;
        }

        .spin-section {
            text-align: center;
            margin-top: 30px;
        }

        .spin-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 20px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .spin-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.5);
        }

        .spin-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .roulette-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .roulette-wrapper {
            position: relative;
            width: 400px;
            height: 400px;
            margin-bottom: 30px;
        }

        #rouletteCanvas {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transition: transform 4s cubic-bezier(0.17, 0.67, 0.12, 0.99);
        }

        .pointer {
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 20px solid transparent;
            border-right: 20px solid transparent;
            border-top: 40px solid #ff6b6b;
            z-index: 10;
            filter: drop-shadow(0 3px 5px rgba(0, 0, 0, 0.3));
        }

        .result {
            font-size: 24px;
            font-weight: bold;
            color: #333;
            text-align: center;
            min-height: 40px;
            padding: 10px;
            background: #f0f0f0;
            border-radius: 10px;
            width: 100%;
            max-width: 400px;
            transition: all 0.3s;
        }

        .result.show {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: scale(1.05);
        }

        @media (max-width: 768px) {
            .content {
                grid-template-columns: 1fr;
            }
            
            .roulette-wrapper {
                width: 300px;
                height: 300px;
            }
            
            h1 {
                font-size: 2em;
            }
        }

        .empty-state {
            text-align: center;
            color: #999;
            padding: 40px;
            font-size: 18px;
        }

        .color-palette {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
            margin-bottom: 10px;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.3s;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border-color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ Î£∞Î†õ ÎèåÎ¶¨Í∏∞</h1>
        
        <div class="content">
            <div class="control-panel">
                <h2>Îã®Ïñ¥ ÏÑ§Ï†ï</h2>
                
                <div class="word-input-section">
                    <div class="word-input-group">
                        <input type="text" class="word-input" id="wordInput" placeholder="Îã®Ïñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" maxlength="20">
                        <button class="add-word-btn" onclick="addWord()">Ï∂îÍ∞Ä</button>
                    </div>
                    
                    <div class="word-list" id="wordList">
                        <div class="empty-state">Ï∂îÍ∞ÄÎêú Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§</div>
                    </div>
                    
                    <div style="margin-top: 20px;">
                        <label style="display: block; margin-bottom: 10px; font-weight: bold;">ÌÖåÎßà ÏÉâÏÉÅ ÏÑ†ÌÉù:</label>
                        <div class="color-palette" id="colorPalette">
                            <div class="color-option selected" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%)" onclick="changeTheme('purple')"></div>
                            <div class="color-option" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%)" onclick="changeTheme('pink')"></div>
                            <div class="color-option" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)" onclick="changeTheme('blue')"></div>
                            <div class="color-option" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)" onclick="changeTheme('green')"></div>
                            <div class="color-option" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%)" onclick="changeTheme('sunset')"></div>
                            <div class="color-option" style="background: linear-gradient(135deg, #30cfd0 0%, #330867 100%)" onclick="changeTheme('ocean')"></div>
                        </div>
                    </div>
                </div>
                
                <div class="spin-section">
                    <button class="spin-btn" id="spinBtn" onclick="spinRoulette()" disabled>
                        üé≤ Î£∞Î†õ ÎèåÎ¶¨Í∏∞
                    </button>
                </div>
            </div>
            
            <div class="roulette-container">
                <div class="roulette-wrapper">
                    <div class="pointer"></div>
                    <canvas id="rouletteCanvas" width="400" height="400"></canvas>
                </div>
                <div class="result" id="result"></div>
            </div>
        </div>
    </div>

    <script>
        let words = [];
        let isSpinning = false;
        let currentTheme = 'purple';
        
        const themes = {
            purple: ['#667eea', '#764ba2', '#8b5cf6', '#a855f7', '#c084fc'],
            pink: ['#f093fb', '#f5576c', '#ff6b9d', '#feca57', '#ff9ff3'],
            blue: ['#4facfe', '#00f2fe', '#48dbfb', '#0abde3', '#006ba6'],
            green: ['#43e97b', '#38f9d7', '#55efc4', '#00b894', '#00cec9'],
            sunset: ['#fa709a', '#fee140', '#ff6348', '#ff9ff3', '#feca57'],
            ocean: ['#30cfd0', '#330867', '#5f27cd', '#00d2d3', '#54a0ff']
        };

        // Enter ÌÇ§Î°ú Îã®Ïñ¥ Ï∂îÍ∞Ä
        document.getElementById('wordInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addWord();
            }
        });

        function addWord() {
            const input = document.getElementById('wordInput');
            const word = input.value.trim();
            
            if (word === '') {
                showMessage('Îã®Ïñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!');
                return;
            }
            
            if (words.includes(word)) {
                showMessage('Ïù¥ÎØ∏ Ï∂îÍ∞ÄÎêú Îã®Ïñ¥ÏûÖÎãàÎã§!');
                return;
            }
            
            if (words.length >= 12) {
                showMessage('ÏµúÎåÄ 12Í∞úÏùò Îã®Ïñ¥Îßå Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§!');
                return;
            }
            
            words.push(word);
            input.value = '';
            updateWordList();
            drawRoulette();
            updateSpinButton();
        }

        function deleteWord(index) {
            words.splice(index, 1);
            updateWordList();
            drawRoulette();
            updateSpinButton();
        }

        function updateWordList() {
            const wordList = document.getElementById('wordList');
            
            if (words.length === 0) {
                wordList.innerHTML = '<div class="empty-state">Ï∂îÍ∞ÄÎêú Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§</div>';
                return;
            }
            
            wordList.innerHTML = words.map((word, index) => `
                <div class="word-item">
                    <span class="word-text">${word}</span>
                    <button class="delete-btn" onclick="deleteWord(${index})">ÏÇ≠Ï†ú</button>
                </div>
            `).join('');
        }

        function drawRoulette() {
            const canvas = document.getElementById('rouletteCanvas');
            const ctx = canvas.getContext('2d');
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = 180;
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            if (words.length === 0) {
                // Îπà ÏÉÅÌÉú ÌëúÏãú
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
                ctx.fillStyle = '#f0f0f0';
                ctx.fill();
                ctx.strokeStyle = '#ddd';
                ctx.lineWidth = 2;
                ctx.stroke();
                
                ctx.fillStyle = '#999';
                ctx.font = '20px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('Îã®Ïñ¥Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî', centerX, centerY);
                return;
            }
            
            const anglePerSection = (2 * Math.PI) / words.length;
            const colors = generateColors(words.length);
            
            words.forEach((word, index) => {
                const startAngle = index * anglePerSection - Math.PI / 2;
                const endAngle = (index + 1) * anglePerSection - Math.PI / 2;
                
                // ÏÑπÏÖò Í∑∏Î¶¨Í∏∞
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.arc(centerX, centerY, radius, startAngle, endAngle);
                ctx.closePath();
                ctx.fillStyle = colors[index];
                ctx.fill();
                ctx.strokeStyle = '#fff';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞
                ctx.save();
                ctx.translate(centerX, centerY);
                ctx.rotate(startAngle + anglePerSection / 2);
                ctx.textAlign = 'center';
                ctx.fillStyle = '#fff';
                ctx.font = 'bold 16px Arial';
                ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                ctx.shadowBlur = 3;
                ctx.fillText(word, radius * 0.65, 0);
                ctx.restore();
            });
            
            // Ï§ëÏã¨ Ïõê Í∑∏Î¶¨Í∏∞
            ctx.beginPath();
            ctx.arc(centerX, centerY, 30, 0, 2 * Math.PI);
            ctx.fillStyle = '#fff';
            ctx.fill();
            ctx.strokeStyle = themes[currentTheme][0];
            ctx.lineWidth = 3;
            ctx.stroke();
        }

        function generateColors(count) {
            const colors = [];
            const themeColors = themes[currentTheme];
            
            for (let i = 0; i < count; i++) {
                const colorIndex = i % themeColors.length;
                colors.push(themeColors[colorIndex]);
            }
            
            // ÏÑûÍ∏∞
            for (let i = colors.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [colors[i], colors[j]] = [colors[j], colors[i]];
            }
            
            return colors;
        }

        function spinRoulette() {
            if (isSpinning || words.length === 0) return;
            
            isSpinning = true;
            document.getElementById('spinBtn').disabled = true;
            document.getElementById('result').textContent = '';
            document.getElementById('result').classList.remove('show');
            
            const canvas = document.getElementById('rouletteCanvas');
            const spinRotations = 5 + Math.random() * 5; // 5-10Î∞îÌÄ¥
            const finalAngle = Math.random() * 360;
            const totalRotation = spinRotations * 360 + finalAngle;
            
            // CSS transitionÏúºÎ°ú ÌöåÏ†Ñ
            canvas.style.transform = `rotate(${totalRotation}deg)`;
            
            setTimeout(() => {
                // Í≤∞Í≥º Í≥ÑÏÇ∞
                const normalizedAngle = (360 - (totalRotation % 360) + 90) % 360;
                const anglePerSection = 360 / words.length;
                const selectedIndex = Math.floor(normalizedAngle / anglePerSection);
                const selectedWord = words[selectedIndex];
                
                // Í≤∞Í≥º ÌëúÏãú
                const resultDiv = document.getElementById('result');
                resultDiv.textContent = `üéâ ${selectedWord}`;
                resultDiv.classList.add('show');
                
                // Ï∫îÎ≤ÑÏä§ Ï¥àÍ∏∞Ìôî
                canvas.style.transition = 'none';
                canvas.style.transform = `rotate(${totalRotation % 360}deg)`;
                
                setTimeout(() => {
                    canvas.style.transition = 'transform 4s cubic-bezier(0.17, 0.67, 0.12, 0.99)';
                    isSpinning = false;
                    updateSpinButton();
                }, 50);
            }, 4000);
        }

        function updateSpinButton() {
            const spinBtn = document.getElementById('spinBtn');
            spinBtn.disabled = words.length === 0 || isSpinning;
        }

        function changeTheme(themeName) {
            currentTheme = themeName;
            
            // ÏÑ†ÌÉùÎêú ÏÉâÏÉÅ ÌëúÏãú
            document.querySelectorAll('.color-option').forEach(option => {
                option.classList.remove('selected');
            });
            event.target.classList.add('selected');
            
            // ÌÖåÎßà Ï†ÅÏö©
            document.body.style.background = `linear-gradient(135deg, ${themes[themeName][0]} 0%, ${themes[themeName][1]} 100%)`;
            
            // Î£∞Î†õ Ïû¨Í∑∏Î¶¨Í∏∞
            drawRoulette();
        }

        function showMessage(message) {
            const resultDiv = document.getElementById('result');
            resultDiv.textContent = message;
            resultDiv.classList.add('show');
            setTimeout(() => {
                resultDiv.classList.remove('show');
                setTimeout(() => {
                    resultDiv.textContent = '';
                }, 300);
            }, 2000);
        }

        // Ï¥àÍ∏∞Ìôî
        drawRoulette();
    </script>
</body>
</html>
